generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model roles {
  id         Int          @id @default(autoincrement())
  value      String       @unique @default("user") @db.VarChar(255)
  user_roles user_roles[]
}

model user_roles {
  user_id Int
  role_id Int
  roles   roles @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id])
}

model users {
  id         Int          @id @default(autoincrement())
  username   String       @unique @db.VarChar(255)
  email      String       @unique @db.VarChar(255)
  password   String       @db.VarChar(255)
  user_roles user_roles[]
  isActive    Boolean  @default(false)
  profilePicture      String?      @db.VarChar(255) // Ссылка на фото профиля (опционально)
  bio                 String?      @db.VarChar(255) // Описание профиля (опционально)
  age                 Int?         // Возраст (опционально)

  messages messages[] @relation("receivedMessages")

  sentMessages messages[] @relation("sentMessages")
  passwordResetTokens PasswordResetToken[]

  userFriendships Friendship[] @relation("userFriendships")
  friendFriendships Friendship[] @relation("friendFriendships")
  posts Post[] @relation("UserPosts")
  
}

model messages {
  id          Int      @id @default(autoincrement())
  senderId    Int
  recipientId Int
  content     String
  createdAt   DateTime @default(now())
  sender      users    @relation("sentMessages", fields: [senderId], references: [id])
  recipient   users    @relation("receivedMessages", fields: [recipientId], references: [id])
}


model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friendship {
  id          Int      @id @default(autoincrement())
  userId      Int      // ID пользователя
  friendId    Int      // ID друга
  status      String   @default("pending") // pending/accepted/rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  user        users    @relation("userFriendships", fields: [userId], references: [id])
  friend      users    @relation("friendFriendships", fields: [friendId], references: [id])

  @@unique([userId, friendId]) // Уникальная пара пользователь-друг
}

model Post {
  id             Int      @id @default(autoincrement())
  title          String   // Название публикации (например, "Продаётся уютный дом")
  description    String   // Описание публикации
  imageUrl       String?  // Ссылка на фото (опционально)
  bedrooms       Int?     // Количество спален
  bathrooms      Int?     // Количество туалетов
  rooms          Int?     // Количество комнат
  squareMeters   Float?   // Площадь в квадратных метрах
  price          Float    // Цена
  location       String   // Местоположение (например, "Москва, ул. Ленина")
  authorId       Int      // ID автора поста
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  author         users    @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
}